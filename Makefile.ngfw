## constants
IMGTOOLS_DIR := $(shell readlink -f $(shell dirname $(MAKEFILE_LIST)))
PKGTOOLS_DIR := $(IMGTOOLS_DIR)/../ngfw_pkgtools

## overridables
ifeq ($(REPOSITORY),)
REPOSITORY := buster
endif
ifeq ($(DISTRIBUTION),)
DISTRIBUTION := $(shell cat $(PKGTOOLS_DIR)/resources/DISTRIBUTION)
endif
ifeq ($(PACKAGE_SERVER_IP),)
PACKAGE_SERVER_IP := package-server.untangle.int
endif

## shell variables
export http_proxy=$(shell perl -pe 's/.*"(.*?)".*/$$1/' 2> /dev/null < /etc/apt/apt.conf.d/01proxy)
export CLOUD_BUILD_OUTPUT_DIR=.
export CLOUD_BUILD_NAME=ngfw
export CLOUD_BUILD_INFO='{}'
export CLOUD_BUILD_DATA=src/debian_cloud_images/data/

## functions
UPPER_CASE = $(shell echo $(1) | tr a-z A-Z)
LOWER_CASE = $(shell echo $(1) | tr A-Z a-z)
AZURE_NAMING = $(shell echo $(1) | tr . -)
VENDOR_CLASS = UNTANGLE_VENDOR_$(call UPPER_CASE,$(1))
LICENSE_CLASS = UNTANGLE_LICENSE_$(call UPPER_CASE,$(1))

## variables
PROJECT := ngfw
ARCH := $(shell dpkg-architecture -qDEB_BUILD_ARCH)
TS_EPOCH := $(shell date +"%s")
TS := $(shell date -d @$(TS_EPOCH) +"%Y-%m-%dt%H%M%S")
TS_DCI := $(shell date -d @$(TS_EPOCH) +"%Y%m%dt%H%M")
HOST := $(shell hostname -s)
VERSION ?= $(shell cat $(PKGTOOLS_DIR)/resources/VERSION)
ARCH_CAPS := $(shell echo $(ARCH) | tr '[a-z]' '[A-Z]')
TMP_DIR := $(IMGTOOLS_DIR)/tmp-$(REPOSITORY)-$(DISTRIBUTION)-$(ARCH)-$(LICENSE)
MOUNT_SCRIPT := /data/image-manager/mounts.py
NETBOOT_HOST := package-server
NETBOOT_USER := buildbot
IMAGES_DIR := /data/untangle-images-$(REPOSITORY)
FAI_COMMON_OPTIONS := --verbose --hostname ngfw --cspace $(IMGTOOLS_DIR)/config_space 
FAI_COMMON_CLASSES := DEBIAN,CLOUD,$(call UPPER_CASE,$(REPOSITORY)),AMD64,UNTANGLE
FAI_LAST_CLASSES := LAST
UNTANGLE_FAI_CONF := $(IMGTOOLS_DIR)/config_space/class/UNTANGLE.var
UNTANGLE_FAI_CONF_TPL := $(UNTANGLE_FAI_CONF).tpl
OVF_FILE_TPL := ngfw.ovf.tpl
BASE_NAME := $(VERSION)_$(REPOSITORY)_$(ARCH)_$(DISTRIBUTION)_$(TS)_$(HOST)
OVF_FILE := $(BASE_NAME).ovf
OVA_NAME := $(BASE_NAME).ova
QCOW2_NAME := $(BASE_NAME).qcow2
RAW_NAME := $(BASE_NAME).raw
VMDK_NAME := $(BASE_NAME).vmdk
EC2_NAME := $(BASE_NAME).ec2
# sizes in GB
DEFAULT_SIZE := 10
OVA_SIZE := 320

## common targets
all: qcow2/untangle-image

clean:
	rm -f $(UNTANGLE_FAI_CONF)

conf: # FAI conf for main class
	perl -pe 's/\+UNTANGLE_MIRROR\+/'$(PACKAGE_SERVER_IP)'/ ; s/\+UNTANGLE_RELEASE\+/'$(DISTRIBUTION)'/' $(UNTANGLE_FAI_CONF_TPL) > $(UNTANGLE_FAI_CONF)

## raw
raw/%-image: conf
	$(eval vendor := $*)
	$(eval vendor_class := $(call VENDOR_CLASS,$*))
	/usr/sbin/fai-diskimage $(FAI_COMMON_OPTIONS) --class $(FAI_COMMON_CLASSES),$(vendor_class),UNTANGLE_LINUX_CONFIG,$(FAI_LAST_CLASSES) --size $(DEFAULT_SIZE)G $(PROJECT)-$(vendor)-$(RAW_NAME)

## qcow2
qcow2/%-image: conf
	$(eval vendor := $*)
	$(eval vendor_class := $(call VENDOR_CLASS,$*))
	/usr/sbin/fai-diskimage $(FAI_COMMON_OPTIONS) --class $(FAI_COMMON_CLASSES),$(vendor_class),UNTANGLE_LINUX_CONFIG,$(FAI_LAST_CLASSES) --size $(DEFAULT_SIZE)G $(PROJECT)-$(vendor)-$(QCOW2_NAME)

qcow2/%-push:
	$(eval vendor := $*)
	$(eval vendor_class := $(call VENDOR_CLASS,$*))
	scp $(PROJECT)-$(vendor)-$(QCOW2_NAME) $(NETBOOT_USER)@$(NETBOOT_HOST):$(IMAGES_DIR)/$(VERSION)/
	ssh $(NETBOOT_USER)@$(NETBOOT_HOST) "sudo python $(MOUNT_SCRIPT) link $(VERSION) $(TS) $(ARCH) $(REPOSITORY)"

## ova
vmdk/%-image: conf
	$(eval vendor := $*)
	$(eval vendor_class := $(call VENDOR_CLASS,$*))
	/usr/sbin/fai-diskimage $(FAI_COMMON_OPTIONS) --class $(FAI_COMMON_CLASSES),$(vendor_class),UNTANGLE_LINUX_CONFIG,$(FAI_LAST_CLASSES) --size $(OVA_SIZE)G $*.raw
	qemu-img convert -O vmdk -o subformat=streamOptimized $*.raw $(PROJECT)-$(vendor)-$(VMDK_NAME)

ova/%-image: vmdk/%-image
	$(eval vendor := $*)
	perl -pe 's/\+VMDK\+/'$(PROJECT)-$(vendor)-$(VMDK_NAME)'/ ; s/\+SIZE\+/'$(shell echo "$(OVA_SIZE)*1024^3" | bc)'/' $(OVF_FILE_TPL) > $(PROJECT)-$(vendor)-$(OVF_FILE)
	tar cvf $(PROJECT)-$(vendor)-$(OVA_NAME) $(PROJECT)-$(vendor)-$(OVF_FILE) $(PROJECT)-$(vendor)-$(VMDK_NAME)

ova/%-push:
	$(eval vendor := $*)
	scp $(PROJECT)-$(vendor)-$(OVA_NAME) $(NETBOOT_USER)@$(NETBOOT_HOST):$(IMAGES_DIR)/$(VERSION)/
	ssh $(NETBOOT_USER)@$(NETBOOT_HOST) "sudo python $(MOUNT_SCRIPT) link $(VERSION) $(TS) $(ARCH) $(REPOSITORY)"

## ec2/<license>/<vendor>-image
ec2/%-image: conf
	$(eval vendor := $(shell basename $*))
	$(eval license := $(shell dirname $*))

	./bin/debian-cloud-images build --build-type official --build-id b0 --version $(call AZURE_NAMING,$(VERSION)) --version-date $(TS) $(REPOSITORY)-$(PROJECT) ec2 $(ARCH) $(license)
	rename "s/$(TS_DCI)/$(TS)/i" debian-$(REPOSITORY)-$(PROJECT)*

ec2/%-push:
	$(eval vendor := $(shell basename $*))
	$(eval license := $(shell dirname $*))
	$(eval dci_base_name := debian-$(REPOSITORY)-$(PROJECT)-ec2-$(license)-$(ARCH)-official-$(call AZURE_NAMING,$(VERSION))-$(TS))

	./bin/debian-cloud-images upload-ec2 --debug --variant release --config-file ngfw.yaml $(dci_base_name).build.json
	./share-ami.sh $(dci_base_name).upload-ec2.json

	scp $(dci_base_name).tar $(dci_base_name).info $(dci_base_name).build.junit.xml $(dci_base_name).build.json $(dci_base_name).upload-ec2.json $(NETBOOT_USER)@$(NETBOOT_HOST):$(IMAGES_DIR)/$(VERSION)/

## azure/<license>/<vendor>-image
azure/%-image: conf
	$(eval vendor := $(shell basename $*))
	$(eval license := $(shell dirname $*))
	$(eval azure_naming := $(shell echo dirname $*))

	./bin/debian-cloud-images build --build-type official --build-id b0 --version $(call AZURE_NAMING,$(VERSION)) --version-date $(TS) $(REPOSITORY)-$(PROJECT) azure $(ARCH) $(license)
	rename "s/$(TS_DCI)/$(TS)/i" debian-$(REPOSITORY)-$(PROJECT)*

azure/%-push:
	$(eval vendor := $(shell basename $*))
	$(eval license := $(shell dirname $*))
	$(eval dci_base_name := debian-$(REPOSITORY)-$(PROJECT)-azure-$(license)-$(ARCH)-official-$(call AZURE_NAMING,$(VERSION))-$(TS))

	./bin/debian-cloud-images upload-azure --debug --variant release --config-file ngfw.yaml $(dci_base_name).build.json

	scp $(dci_base_name).tar $(dci_base_name).info $(dci_base_name).build.junit.xml $(dci_base_name).build.json $(dci_base_name).upload-azure.json $(NETBOOT_USER)@$(NETBOOT_HOST):$(IMAGES_DIR)/$(VERSION)/
